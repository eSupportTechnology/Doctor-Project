generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id            Int    @id @unique @default(autoincrement())
  UserName      String @unique
  email         String @unique
  contactNumber String
  Password      String
}

model Doctors {
  id               Int       @id @unique @default(autoincrement())
  fullName         String
  email            String    @unique
  password         String
  specializationId Int
  specialization   Category  @relation(fields: [specializationId], references: [id])
  qualifications   String?
  experience       Int
  contact_number   String
  address          String
  reg_number       String
  gender           String?
  birthday         DateTime?
  profileImage     String?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt

  schedule     Schedule[]
  Availability Availability[]
  Invoice      Invoice[]
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  dob       DateTime
  gender    String
  phone     String
  email     String   @unique
  address   String
  nic       String   @unique
  username  String   @unique
  password  String
  profileImage String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       Int    @id @unique @default(autoincrement())
  eng_name String @unique
  sin_name String
  image    String

  Doctors  Doctors[]
  pharmacy pharmacy[]
}

model staff {
  id            Int      @id @unique @default(autoincrement())
  firstName     String
  lastName      String
  email         String   @unique
  contactNumber String
  address       String
  gender        String
  dob           DateTime
  profileImage  String
  NIC           String
  Qualification String
  password      String
}

model pharmacy {
  id           Int      @id @unique @default(autoincrement())
  itemName     String
  description  String
  price        String
  image        String
  discount     Int
  discountType String
  categoryID   Int
  category     Category @relation(fields: [categoryID], references: [id])
}

model Service {
  id          Int      @id @unique @default(autoincrement())
  description String
  amount      Float
  addedData   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  invoice InvoiceService[]
}

model Invoice {
  id        Int      @id @unique @default(autoincrement())
  doctorID  Int
  doctor    Doctors  @relation(fields: [doctorID], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  service InvoiceService[]
}

model InvoiceService {
  id        Int     @id @unique @default(autoincrement())
  InvoiceID Int
  ServiceID Int
  invoice   Invoice @relation(fields: [InvoiceID], references: [id])
  Service   Service @relation(fields: [ServiceID], references: [id])
}

model Availability {
  id             Int      @id @unique @default(autoincrement())
  doctor_id      Int
  doctor         Doctors  @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  available_from DateTime
  available_to   DateTime
  week_day       String
  start_time     String
  end_time       String
  doctor_fee     String
  patients       Int
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

//This schedule model is for the testing purposes.
model Schedule {
  id         Int      @id @default(autoincrement())
  doctor_id  Int
  date       DateTime
  start_time String
  end_time   String
  doctor_fee String
  patients   Int
  sheets     String   @db.LongText
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  appointment Appointment[]
  doctor      Doctors       @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
}

model Appointment {
  id         Int     @id @unique @default(autoincrement())
  scheduleID Int
  patientId  Int?
  mobileNo   String
  title      String?
  firstName  String
  lastName   String
  gender     String
  fee        Float?
  age        Int
  nic        String
  sheet_No   Int
  timeSlot   String
  status     String  @default("unpaid")
  active     String  @default("active")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?

  service Services[]

  schedule Schedule @relation(fields: [scheduleID], references: [id])
}

model Services {
  id Int @id @default(autoincrement())
  appointmentId Int
  description String
  price Float

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  appointment Appointment @relation(fields: [appointmentId], references: [id])
}